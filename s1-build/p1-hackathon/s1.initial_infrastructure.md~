##Ch 2 - Initial Infrastructure


This early on, you generally don't need big fancy server space. Most veteran hackers will already have a set preference on this. If so feel free to skip this next chapter. If you are not a veteran hacker you will want to read up so you have an idea of what you're getting into. 

###A note about technology:
Technology changes at a ridclious rate. In the year since I started writing this I have had to go back and make revisions so I am assuming in the years to come after I publish this much will change. I will try and make note of the areas that are likely to change and the ones that won't but please keep that in mind if you pick up a copy of SOGOTP in the year 2050.

##Setting up your servers:
This next part assumes you're building a web service of some type. You might not need servers, for example if you are building hardware or possibly certain types of mobile apps. Personally I couldn't imagine starting and tech startup that did not at least some kind of web based presence located in the cloud. If you're building a mobile app chances are on a long enough timeline you are going to want to save some information on your servers instead of on the users phone.

At the Hackathon stage you can generally get away with smaller servers such as virtual shared hosting packages but if you plan on scaling up quickly you may want to spend a little bit extra to get the right package. I actually keep a cloud server farm ready to boot up at a moments notice but I will tell you more about that later.

###Virtual Shared:
Entry level hosting where you sign up for a small amount of space that is typically shared with a couple of dozen other people. Even at an entry level I am not sure I recommend this. It depends on how comfortable you are with server maintenance. If you are not a familiar with command line this might be the way you want to go early on. Understand though this is NOT scalable long term. At 50+ users you will be pushing the limit of what your app can do. Server providers will probably say 100 - 500 will be fine, but remember you don't want to take any chances long term. 

You also are limited significantly in the flexibility. You cannot install custom software such as custom  PHP module. You don't have full access to the server because you share it. This limits you from doing a lot of cool and necessary stuff. Some go as far as not letting you set up cron jobs. This means any batch processing such as giving your users extra points every night is impossible running on this instance.

###Virtual Dedicated
This is a virtual instance that you have pretty much full control over. What is a 'virtual instance'? Virtual instances are computer applications that run on a very large super server that each act like they are a real server. Since you have full control over these virtual servers you have a lot of the flexibility you have with virtual shared. These were cool in the early 2000nds. They served a solid purpose but since the rise of cloud servers there is little need for these now.

These sometimes come with cPanel installed but to get full advantage of these you will need at least a basic working knowledge of command line.

###Dedicated Servers
These are real physical servers that you have control of. Under no circumstances do I recommend a tech startup waste even one dollar on these. These became outdated in the early 2000s. Having to worry about replacing a crashed hard drive on a server is now like having to worry about if your horse needs to be reshoed. The rise of mega hosting providers made this way of hosting completely obsolete for everyone except the mega corporate juggernauts.

###Cloud Servers
I swear by this. Services like Heroku and Amazon have changed the face of tech. I can set up entire Platform as a Service infrastructures in the cloud with little effort that can scale to support millions upon millions of users. These cloud services are built with smart tech that allow them to notice if a server is under heavy traffic and boot up an exact copy to handle the additional traffic. I will go into more detail on this in later chapters. 

Luckily for the hackathon phase these services can also be scaled down to handle even the smallest projects at little or NO costs. The only drawback is it does require a pretty solid knowledge of their platforms to do this. I'm not sure I would recommend this at the hackathon phase if you have never worked with cloud services before(unless that is the point of the hackathon, to learn how to work with cloud services. Then by all means go for it).

If it wasn't obvious my personal preference is the cloud services. Specifically the Amazon Web Services. Both Schematical and SnowShoe's have the majority of their services hosted in the AWS. I also keep a personal farm of servers I call the 'Lab' for my random little projects. This way I can log in and boot up a custom image anytime I want.

##Operating Systems and Technologies
Again chances are if you are a developer or hacker you already have strong feelings on what OS and tech you want to build in. Feel free to skip ahead if you would like.

###PHP:
This is one of the internets most popular languages and was my personal favorite(until NodeJS). Facebook was built off of it. Its a simple scripting language that has evolved to become object oriented. It can be run on open source linux operating systems as well as the expensive Windows server.

Forgive my little rant but I need to go off here for a second: It has received a lot of criticism from programming snobs(you know who you are) for being 'sloppy'. The reason for this is any old joe with little or no programming language can pick it up and write a script pretty quickly. This happens a lot. The end products of this could be called... well... sloppy. On the other hand ever since PHP has adopted the object oriented model some really amazing beautiful architectures have been built on PHP. 

Facebook has also invented a way to compile PHP making it faster and more scalable long term. Pretty badass if you ask me.

###Ruby
Ruby is also blowing up right now. It is actually quite easy to use and its scaffolding can speed up development time.

Java and Python
Java and Python are also solid bets, I have written many apps in Java, it also is the basis of the Android operating system is written in so you could potentially kill two birds with one stone here. I have never used python since I wrote a 3d graphics engine sophomore year of college but I have friends that swear by it.

###.NET
I don't have much more to say then .NET is a tool of the devil. If you chose to go this route good luck.

As I said before my personal favorite is PHP running on Ubuntu. Ubuntu is a free version of linux. You can run it as either a server or on your laptop/desktop. It makes programming locally really easy. When you're ready to deploy the code to your server it is pretty much seamless. Not a lot of other OSs can boast that. 

###Python:
I don't do much with Python but my friends over at [drifty.co](http://drifty.co/) use it quite a bit. 

###Node JS:
Node JS is amazing. As of 2014 there is an interesting trend happening where "If it can be written in JavaScript it will be written in JavaScript". This is one way that a standard in naturally emerging, if the majority of apps can be written in JavaScript(mobile, web, desktop, hardware, etc) then you no longer need to hire a team of developers that specialize in one type of app or another. This has big business and recruiting implications that you will need to consider when putting together a team(see more about this in future chapters).

For now just know that NodeJS is an amazingly powerful language and many veterained programmers are making the switch to NodeJS. If you are not set on a language yet I would strongly consider NodeJS.

##Service Providers:
There are literally hundreds of service providers out there ready to host your apps. I don't have time to go over each of them but I will tell you about my two favorites.
 
###Godaddy.com
I know I am going to take some heat for this from some of the hackers out there but Godaddy is has some good entry level server space. Before I was a commandline ninja I started out with a virtual shared package on godaddy then graduated to the virtual dedicated and still have two of these accounts running at godaddy. 

Godaddy also hosts all of my domains they have an easy to use domain management tools and reasonably priced SSL certs.

###Amazon Web Services:
I know they say its simple to use but you kind of need to be an uber geek to use this. Nonetheless once you get versed in their tech there is not much you can't do with the AWS. Unfortunately the small amount of down time they have had has been very publicly shared. If you do go AWS make sure you have a back up service you can point at in case of emergency.


##My 'Lab' vs what is best for you:
My setup with the cloud based server farm will be overkill for 99% of you. And trying to tackle the AWS as a noob during a hackathon you could end up burning the entire hackathon away just trying to get a solid instance setup. So lets get one thing straight: I am NOT advocating the AWS server farm approach for anyone but the hardcore startup junkies/hackers. If this is your first rodeo go with the virtual dedicated or virtual shared. Just keep in mind that can only hold up for so long. Make sure to check back before you hit 50 or so users and reassess the situation.

If you are a hard core startup hacker then by all means set up a farm. I would love to hear from you and see what you end up setting up. 






----------------------NOTES:-----------------
//TODO: Talk about iwantmyname.com as a domian registraint


